{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Initial dataset shape: (583, 11)\n",
      "After dropping nulls: (579, 11)\n",
      "\n",
      "Model Accuracy: 0.66\n",
      "\n",
      "Classification Report:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           1       0.67      0.88      0.76        73\n",
      "           2       0.57      0.28      0.38        43\n",
      "\n",
      "    accuracy                           0.66       116\n",
      "   macro avg       0.62      0.58      0.57       116\n",
      "weighted avg       0.64      0.66      0.62       116\n",
      "\n",
      "Files saved to: /Users/azarshaik/Desktop/liver_cirrhosis_project\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import joblib, os\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "import joblib\n",
    "from sklearn.metrics import accuracy_score, classification_report\n",
    "\n",
    "# Load and clean dataset\n",
    "df = pd.read_csv(\"liver_data.csv\")\n",
    "print(\"Initial dataset shape:\", df.shape)\n",
    "df = df.dropna()\n",
    "print(\"After dropping nulls:\", df.shape)\n",
    "df['gender'] = df['gender'].map({'Male': 1, 'Female': 0})\n",
    "\n",
    "# Split features and target\n",
    "X = df.drop(\"is_patient\", axis=1)\n",
    "y = df[\"is_patient\"]\n",
    "\n",
    "# Train-test split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Normalize input features\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train)\n",
    "X_test_scaled = scaler.transform(X_test)\n",
    "\n",
    "# Train model\n",
    "model = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "model.fit(X_train_scaled, y_train)\n",
    "\n",
    "# Predict and evaluate\n",
    "y_pred = model.predict(X_test_scaled)\n",
    "print(f\"\\nModel Accuracy: {accuracy_score(y_test, y_pred):.2f}\")\n",
    "print(\"\\nClassification Report:\\n\", classification_report(y_test, y_pred))\n",
    "\n",
    "\n",
    "ABS_PATH = '/Users/azarshaik/Desktop/liver_cirrhosis_project'   # project root\n",
    "joblib.dump(model, os.path.join(ABS_PATH, 'rf_acc_68.pkl'))\n",
    "joblib.dump(scaler, os.path.join(ABS_PATH, 'normalizer.pkl'))\n",
    "\n",
    "print(\"Files saved to:\", ABS_PATH)\n",
    "\n",
    "\n",
    "joblib.dump(model, 'rf_acc_68.pkl')\n",
    "joblib.dump(scaler, 'normalizer.pkl')\n",
    "\n",
    "# Visualization\n",
    "sns.countplot(x=y)\n",
    "plt.title(\"Class Distribution: is_patient\")\n",
    "plt.xlabel(\"0 = Healthy, 1 = Has Liver Disease\")\n",
    "plt.ylabel(\"Count\")\n",
    "plt.show()\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "venv",
   "language": "python",
   "name": "venv"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
